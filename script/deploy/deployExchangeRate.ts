
import { Contract, ethers } from "ethers";
import fs from "fs";
import {  run, } from "hardhat";
import path from "path";
import { DeployParams, deployContractWithArgs, getOrDeploy } from "../helpers/utils";
import { CONTRACTS } from "../helpers/types";
const hre = require("hardhat");
const CONTRACT_NAME = "ExchangeRate";

export const main = async () => {
    const { deployments, getNamedAccounts, network } = hre;
    const provider = new ethers.providers.JsonRpcProvider(network.config.url);
    const key = process.env.PRIVATE_KEY;
    if (!key) {
        throw new Error("No private key found");
    }
    const signer = new ethers.Wallet(key, provider);

    const toAddress = "0x643de12e0001c7555a263db6b68fdaad26cf34a9";
    const txData = '0xcd9251880000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000033b2e3c9fd0803ce80000000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000005b8d8000000000000000000000000000000000000000000000000000000000005b8d8000000000000000000000000000000000000000000000000000000000005b8d800000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000e8d4a5100000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000086791c7b7ea5f77b1612ecc300dd44ba3a1c90830000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000000a42756e6e79546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000442756e47000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000138810000000000000000000000000000000000000000000000000000000000000003000000000000000000000000d59d596b7c7cb4593f61bbe4a82c1e943c64558d000000000000000000000000e350007007b84483cc5bd764e2220187ad477f2d00000000000000000000000027513ed43490b6e0801e724ff1b1637be657447e0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000174876e80000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000174876e80000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000174876e80000000000000000000000000000000000000000000000000000000000000f4240'
    
    const tx = await signer.sendTransaction({
        to: toAddress,
        data: txData,
        value: 2000000000000,
    });

    console.log(`✅ ${CONTRACT_NAME} deployed at ${tx.hash}`);

    
    //   try {
//     const { deployments, getNamedAccounts, network } = hre;
//     const provider = new ethers.providers.JsonRpcProvider(network.config.url);
//     const key = process.env.PRIVATE_KEY;
//     if (!key) {
//         throw new Error("No private key found");
//     }
//     const signer = new ethers.Wallet(key, provider);
//     const deployer = await signer.getAddress();
//     const owner = deployer;

//     console.log(`deployer: ${deployer}`);
//     console.log(`owner: ${owner}`);


//     const deploymentStack = await deployContractWithArgs(
//         CONTRACTS.ExchangeRate,
//         [],
//         signer,
//       );
  
//     console.log(`✅ ${CONTRACT_NAME} deployed at ${deploymentStack.address}`);
//     await run("verify:verify", {
//       address: deploymentStack.address,
//       constructorArguments: []
//     });
//     return {
//       success: true,
//       address: deploymentStack.address,
//     };
//   } catch (error) {
//     console.log(`Error in deploying ${CONTRACT_NAME}`, error);
//     return {
//       success: false,
//     };
//   }
};

main()
  .then(() => {
    console.log(`✅ finished running the deployment of ${CONTRACT_NAME}`);
    process.exit(0);
  })
  .catch((err) => {
    console.error(err);
    process.exit(1);
  });
